class Solution {
    public String removeOuterParentheses(String s) {
        Stack<Character> st = new Stack<>();
        StringBuilder sb = new StringBuilder();
        for(char ch : s.toCharArray()){
            if(ch == '('){
                if(!st.isEmpty()){
                    sb.append(ch);
                }
                st.push(ch);
            }
            else{
                st.pop();
                if(!st.isEmpty()){
                    sb.append(ch);
                }
            }
        }
        return sb.toString();
    }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
14. Longest Common Prefix
Solved
Easy
Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".class Solution {
    public String longestCommonPrefix(String[] strs) {
        if (strs == null || strs.length == 0) return "";

        Arrays.sort(strs);

        String first = strs[0];
        String last = strs[strs.length - 1];
        int i = 0;


        while (i < first.length() && i < last.length() && first.charAt(i) == last.charAt(i)) {
            i++;
        }

        return first.substring(0, i);

    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
796. Rotate String
Solved
Easy
Given two strings s and goal, return true if and only if s can become goal after some number of shifts on s.
class Solution {
    public boolean rotateString(String s, String goal) {
        // Edge case: If lengths don't match, return false immediately
        if (s.length() != goal.length()) {
            return false;
        }

        // The key observation: If `s` can rotate to become `goal`,
        // then `goal` must be a substring of `s + s`
        String doubled = s + s;

        return doubled.contains(goal);
    }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
242. Valid Anagram
Solved
Easy
Given two strings s and t, return true if t is an anagram of s, and false otherwise.
class Solution {
    public boolean isAnagram(String s, String t) {
          boolean result=false;  
          if(s.length()!=t.length()){
            result=false;
          }
          if(sortt(s).equals(sortt(t))){
            result= true;
          }
          return result;
          
    }
    private String sortt(String str){
            char[] arr= str.toCharArray();
            Arrays.sort(arr);
            return new String(arr);
          }
}/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
1614. Maximum Nesting Depth of the Parentheses
Solved
Easy
Given a valid parentheses string s, return the nesting depth of s. The nesting depth is the maximum number of nested parentheses
class Solution {
    public int maxDepth(String s) {
        char[] a=s.toCharArray();
        int count=0;
        int max=0;
        for(int i=0;i<s.length()-1;i++){
            if(a[i]=='('){
                count+=1;
                max=(count>max)?count:max;
            }
            else if(a[i]==')'){
                  count-=1;
            }
        }
        return max;
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
